plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.sonarqube" version "3.4.0.2513"
	id 'jacoco'
}

def sonarqubeProperties = new Properties()
sonarqubeProperties.load(new FileInputStream(rootProject.file("sonarqube.properties")))


group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'mysql:mysql-connector-java:8.0.32'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	compileOnly 'org.projectlombok:lombok'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2:2.1.214'
}

jacocoTestReport {
	dependsOn tasks.test
	reports {
		xml.enabled(true)
		html.enabled(true)
		xml.destination(new File("build/reports/jacoco.xml"))
	}

}

sonarqube {
	properties {
		property "sonar.host.url", sonarqubeProperties.getProperty('host.url')
		property "sonar.projectKey", sonarqubeProperties.getProperty('projectKey')
		property "sonar.login", sonarqubeProperties.getProperty('login')
		property "sonar.coverage.jacoco.xmlReportPaths", sonarqubeProperties
				.getProperty('coverage.jacoco.xmlReportPaths')
		property "sonar.language", sonarqubeProperties.getProperty('language')
		property "sonar.sourceEncoding", sonarqubeProperties.getProperty('sourceEncoding')
		property "sonar.sources", sonarqubeProperties.getProperty('sources')
		property "sonar.tests", sonarqubeProperties.getProperty('tests')
		property "sonar.java.binaries", sonarqubeProperties.getProperty('java.binaries')
		property "sonar.exclusions", sonarqubeProperties.getProperty('exclusions')
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}
